{"version":3,"sources":["components/TooltipContent.jsx","components/Charts.jsx","components/Options.jsx","constants.js","components/Shortcuts.jsx","components/ChartWithSelect.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TooltipContent","active","payload","label","activeDotValue","length","sorted","sort","a","b","value","date","Date","className","toLocaleDateString","map","item","name","replace","formattedValue","toLocaleString","key","getMax","data","reduce","acc","current","values","Object","keys","filter","k","includes","Math","max","round","apply","Charts","title","onDotMouseOver","onDotMouseLeave","width","height","margin","top","right","left","bottom","dataKey","tickFormatter","v","angle","textAnchor","domain","interval","content","type","stroke","dot","activeDot","onMouseOver","onMouseLeave","Options","inputs","i","shouldShow","input","AGGREGATE_OPTIONS","SHORTCUTS","states","counties","aggregateBy","Shortcuts","onChange","s","role","onClick","mapStringToSelectOption","ChartWithSelect","useState","selectedStates","setSelectedStates","selectedCounties","setSelectedCounties","setAggregateBy","setActiveDotValue","includesState","st","getData","d","output","forEach","state","county","c","ct","filteredData","statesList","countiesList","concat","options","isMulti","Boolean","checked","e","target","style","display","join","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.121fcdd1.chunk.js","sourcesContent":["import React from 'react';\n\nconst TooltipContent = ({\n  active, payload, label, activeDotValue,\n}) => {\n  if (!active || !payload.length) {\n    return null;\n  }\n\n\n  const sorted = payload.sort((a, b) => (a.value > b.value ? -1 : 1));\n\n  const date = new Date(label);\n  return (\n    <div className=\"tooltip\">\n      <p className=\"tooltip-label\">\n        {date.toLocaleDateString()}\n      </p>\n      {sorted.map((item) => {\n        const name = item.name.replace(/-/g, ' ').replace('combined', '').replace('cases', '').replace('deaths', '');\n        const formattedValue = item.value.toLocaleString();\n        return (\n          <p key={item.name}>\n            {activeDotValue === item.value ? (\n              <strong>\n                {formattedValue}\n                {name ? ` - ${name}` : ''}\n              </strong>\n            ) : (\n              <span>\n                {formattedValue}\n                {name ? ` - ${name}` : ''}\n              </span>\n            )}\n\n          </p>\n        );\n      })}\n\n    </div>\n  );\n};\n\nexport default TooltipContent;\n","import React from 'react';\nimport {\n  LineChart, XAxis, YAxis, Tooltip, Line, CartesianGrid,\n} from 'recharts';\n\nimport TooltipContent from './TooltipContent';\n\nconst getMax = (name, data) => data.reduce((acc, current) => {\n  const keys = Object.keys(current).filter((k) => k.includes(name));\n  const values = keys.map((key) => current[key]);\n  return Math.max(acc, Math.round(Math.max.apply(null, values) * 1.1));\n}, 0);\n\nconst SIZE = 800;\n\nconst Charts = ({\n  name,\n  data,\n  title,\n  onDotMouseOver,\n  onDotMouseLeave,\n  activeDotValue,\n}) => (\n  <div className=\"charts-container\">\n    <h2>{title}</h2>\n    <div className=\"charts\">\n\n\n      {['cases', 'deaths'].map((name) => (\n        <div key={name}>\n          <h3 className=\"chart-title\">\n            {name}\n          </h3>\n          <LineChart\n            width={SIZE}\n            height={SIZE}\n            margin={{\n              top: 25,\n              right: 30,\n              left: 70,\n              bottom: 100,\n            }}\n            data={data}\n          >\n            <XAxis dataKey=\"date\" tickFormatter={(v) => `${(new Date(v)).toLocaleDateString()}`} angle={-45} textAnchor=\"end\" />\n            <YAxis\n              domain={[0, getMax(name, data)]}\n              interval={0}\n              tickFormatter={(v) => `${v.toLocaleString()}`}\n            />\n            <CartesianGrid />\n            <Tooltip content={({ active, payload, label }) => (\n              <TooltipContent\n                active={active}\n                payload={payload}\n                label={label}\n                activeDotValue={activeDotValue}\n              />\n            )}\n            />\n\n            {Object.keys(data[data.length - 1]).filter((k) => k.includes(name)).map((k) => (\n              <Line\n                key={k}\n                type=\"natural\"\n                dataKey={k}\n                stroke=\"#8884d8\"\n                dot={false}\n                activeDot={{ onMouseOver: onDotMouseOver, onMouseLeave: onDotMouseLeave }}\n              />\n            ))}\n\n          </LineChart>\n        </div>\n      ))}\n\n    </div>\n  </div>\n);\n\nexport default Charts;\n","import React from 'react';\n\nconst Options = ({ inputs }) => (\n  <div className=\"chart-options\">\n    <div className=\"form\">\n      <h2>Filters</h2>\n      {inputs.map((i) => (i.shouldShow ? (\n        <div className=\"form-row\" key={i.label}>\n          <div className=\"label\">\n            {i.label}\n            :\n          </div>\n          <div className=\"select\">\n            {i.input}\n          </div>\n        </div>\n      ) : null))}\n    </div>\n  </div>\n);\n\nexport default Options;\n","export const AGGREGATE_OPTIONS = [\n  { label: 'U.S.', value: 'state' },\n  { label: 'States', value: 'county' },\n  { label: 'Counties', value: 'none' },\n];\nexport const SHORTCUTS = [\n  {\n    name: 'U.S.',\n    states: [],\n    counties: [],\n    aggregateBy: AGGREGATE_OPTIONS[0],\n  },\n  {\n    name: 'California',\n    states: ['California'],\n    counties: [],\n    aggregateBy: AGGREGATE_OPTIONS[1],\n  },\n  {\n    name: 'New York',\n    states: ['New York'],\n    counties: [],\n    aggregateBy: AGGREGATE_OPTIONS[1],\n  },\n  {\n    name: 'Massachusetts',\n    states: ['Massachusetts'],\n    counties: [],\n    aggregateBy: AGGREGATE_OPTIONS[1],\n  },\n  {\n    name: 'Boston Area',\n    states: ['Massachusetts'],\n    counties: ['Suffolk', 'Norfolk, Middlesex', 'Essex'],\n    aggregateBy: AGGREGATE_OPTIONS[2],\n  },\n  {\n    name: 'SF Bay Area',\n    states: ['California'],\n    counties: ['Santa Clara', 'Alameda', 'San Francisco', 'Contra Costa', 'San Mateo', 'Marin'],\n    aggregateBy: AGGREGATE_OPTIONS[2],\n  },\n];\n","import React from 'react';\n\nimport { SHORTCUTS } from '../constants';\n\nconst Shortcuts = ({ onChange }) => (\n  <div className=\"shortcuts\">\n    <h2>Quick Links</h2>\n    {SHORTCUTS.map((s) => (\n      <div\n        key={s.name}\n        className=\"shortcut\"\n        role=\"button\"\n        onClick={() => onChange(s)}\n      >\n        {s.name}\n      </div>\n    ))}\n  </div>\n);\n\nexport default Shortcuts;\n","import React, { useState } from 'react';\nimport Select from 'react-select';\n\nimport Charts from './Charts';\nimport Options from './Options';\nimport Shortcuts from './Shortcuts';\nimport { states, data } from '../counties.json';\nimport { AGGREGATE_OPTIONS } from '../constants';\n\nconst mapStringToSelectOption = (k) => ({ value: k, label: k });\n\nconst ChartWithSelect = () => {\n  // State\n  const [selectedStates, setSelectedStates] = useState([]);\n  const [selectedCounties, setSelectedCounties] = useState([]);\n  const [aggregateBy, setAggregateBy] = useState(AGGREGATE_OPTIONS[0]);\n  const [activeDotValue, setActiveDotValue] = useState();\n\n  // State Helpers\n  const includesState = (s) => (\n    !selectedStates || !selectedStates.length || (selectedStates.map((st) => st.value).includes(s))\n  );\n  const includesCounty = (c) => (\n    !selectedCounties\n    || !selectedCounties.length || (selectedCounties.map((ct) => ct.value).includes(c))\n  );\n  const getData = (d, k) => {\n    const output = {};\n    Object.keys(d[k]).forEach((state) => {\n      if (includesState(state)) {\n        Object.keys(d[k][state]).forEach((county) => {\n          if (includesCounty(county)) {\n            let key;\n            switch (aggregateBy.value) {\n              case 'state':\n                key = k;\n                break;\n              case 'county':\n                key = `${state} ${k}`;\n                break;\n              default:\n                key = `${county}, ${state} ${k}`;\n            }\n            output[key] = output[key] || 0;\n            output[key] += d[k][state][county];\n          }\n        });\n      }\n    });\n\n    return output;\n  };\n\n  // Variables\n  const filteredData = data.map((d) => ({ date: d.date, ...getData(d, 'cases'), ...getData(d, 'deaths') }));\n  const statesList = Object.keys(states).map(mapStringToSelectOption);\n  const countiesList = Object.keys(states).reduce((acc, s) => {\n    const state = states[s];\n\n    if (includesState(s)) {\n      return acc.concat(state.counties);\n    }\n    return acc;\n  }, []).map(mapStringToSelectOption);\n  const inputs = [\n    {\n      shouldShow: true,\n      label: 'State',\n      input: (\n        <Select\n          options={statesList}\n          value={selectedStates}\n          onChange={(v) => {\n            setAggregateBy(AGGREGATE_OPTIONS[v && v.length ? 1 : 0]);\n            setSelectedStates(v);\n          }}\n          isMulti\n        />),\n    },\n    {\n      shouldShow: selectedStates && Boolean(selectedStates.length),\n      label: 'County',\n      input: (\n        <Select\n          options={countiesList}\n          value={selectedCounties}\n          onChange={(v) => {\n            setAggregateBy(AGGREGATE_OPTIONS[v && v.length ? 2 : 1]);\n            setSelectedCounties(v);\n          }}\n          isMulti\n        />),\n    },\n    {\n      shouldShow: (\n        (!selectedStates.length\n        || selectedStates.length > 1)\n        && (!selectedCounties || !selectedCounties.length)),\n      label: 'Combine states?',\n      input: (\n        <input\n          type=\"checkbox\"\n          checked={aggregateBy === AGGREGATE_OPTIONS[0]}\n          onChange={(e) => {\n            const { checked } = e.target;\n            setAggregateBy(AGGREGATE_OPTIONS[checked ? 0 : 1]);\n          }}\n        />\n      ),\n    },\n    {\n      shouldShow: (\n        selectedStates\n        && Boolean(selectedStates.length)\n      ),\n      label: 'Combine counties?',\n      input: (\n        <input\n          type=\"checkbox\"\n          checked={aggregateBy === AGGREGATE_OPTIONS[1]}\n          onChange={(e) => {\n            const { checked } = e.target;\n            setAggregateBy(AGGREGATE_OPTIONS[checked ? 1 : 2]);\n          }}\n        />\n      ),\n    },\n  ];\n\n  // Handlers\n  const onShortcutChange = (s) => {\n    setSelectedStates(s.states.map(mapStringToSelectOption));\n    setSelectedCounties(s.counties.map(mapStringToSelectOption));\n    setAggregateBy(s.aggregateBy);\n  };\n  const onDotMouseOver = (e) => { setActiveDotValue(e.value); };\n\n\n  return (\n    <div className=\"container\">\n      <div style={{ display: 'flex' }}>\n        <Options inputs={inputs} />\n        <Shortcuts onChange={onShortcutChange} />\n      </div>\n\n\n      <Charts\n        title={`United States${\n          selectedStates && selectedStates.length ? ` > ${selectedStates.map((s) => s.label).join(', ')}` : ''\n        }${\n          selectedCounties && selectedCounties.length ? ` > ${selectedCounties.map((s) => s.label).join(', ')} counties` : ''\n        }`}\n        data={filteredData}\n        onDotMouseOver={onDotMouseOver}\n        activeDotValue={activeDotValue}\n      />\n\n\n    </div>\n  );\n};\n\nexport default ChartWithSelect;\n","import React from 'react';\n\nimport ChartWithSelect from './components/ChartWithSelect';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>US COVID-19 Data</h1>\n      <ChartWithSelect />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}