{"version":3,"sources":["components/TooltipContent.jsx","components/Charts.jsx","components/Options.jsx","constants.js","components/Shortcuts.jsx","components/ChartWithSelect.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TooltipContent","active","payload","label","length","sorted","sort","a","b","value","date","Date","className","toLocaleDateString","map","item","key","name","toLocaleString","replace","getMax","data","reduce","acc","current","values","Object","keys","filter","k","includes","Math","max","round","apply","Charts","title","width","height","margin","top","right","left","bottom","dataKey","tickFormatter","v","angle","textAnchor","domain","interval","content","type","stroke","Options","inputs","i","shouldShow","input","AGGREGATE_OPTIONS","SHORTCUTS","states","counties","aggregateBy","Shortcuts","onChange","s","role","onClick","mapStringToSelectOption","ChartWithSelect","useState","selectedStates","setSelectedStates","selectedCounties","setSelectedCounties","setAggregateBy","includesState","st","getData","d","output","forEach","state","county","c","ct","filteredData","statesList","countiesList","concat","options","isMulti","Boolean","checked","e","target","style","display","join","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.110344ad.chunk.js","sourcesContent":["import React from 'react';\n\nconst TooltipContent = ({ active, payload, label }) => {\n  if (!active || !payload.length) {\n    return null;\n  }\n\n\n  const sorted = payload.sort((a, b) => (a.value > b.value ? -1 : 1));\n\n  const date = new Date(label);\n  return (\n    <div className=\"tooltip\">\n      <p className=\"tooltip-label\">\n        {date.toLocaleDateString()}\n      </p>\n      {sorted.map((item) => (\n        <p key={item.name}>\n          {item.value.toLocaleString()}\n          {' '}\n          {item.name.replace(/-/g, ' ').replace('combined', '')}\n        </p>\n      ))}\n\n    </div>\n  );\n};\n\nexport default TooltipContent;\n","import React from 'react';\nimport {\n  LineChart, XAxis, YAxis, Tooltip, Line, CartesianGrid,\n} from 'recharts';\n\nimport TooltipContent from './TooltipContent';\n\nconst getMax = (name, data) => data.reduce((acc, current) => {\n  const keys = Object.keys(current).filter((k) => k.includes(name));\n  const values = keys.map((key) => current[key]);\n  return Math.max(acc, Math.round(Math.max.apply(null, values) * 1.1));\n}, 0);\n\nconst SIZE = 800;\n\nconst Charts = ({ name, data, title }) => (\n  <div className=\"charts-container\">\n    <h2>{title}</h2>\n    <div className=\"charts\">\n\n\n      {['cases', 'deaths'].map((name) => (\n        <div key={name}>\n          <h3 className=\"chart-title\">\n            {name}\n          </h3>\n          <LineChart\n            width={SIZE}\n            height={SIZE}\n            margin={{\n              top: 25,\n              right: 30,\n              left: 70,\n              bottom: 100,\n            }}\n            data={data}\n          >\n            <XAxis dataKey=\"date\" tickFormatter={(v) => `${(new Date(v)).toLocaleDateString()}`} angle={-45} textAnchor=\"end\" />\n            <YAxis\n              domain={[0, getMax(name, data)]}\n              interval={0}\n              tickFormatter={(v) => `${v.toLocaleString()}`}\n            />\n            <CartesianGrid />\n            <Tooltip content={TooltipContent} />\n\n            {Object.keys(data[data.length - 1]).filter((k) => k.includes(name)).map((k) => (<Line key={k} type=\"natural\" dataKey={k} stroke=\"#8884d8\" />))}\n\n          </LineChart>\n        </div>\n      ))}\n\n    </div>\n  </div>\n);\n\nexport default Charts;\n","import React from 'react';\n\nconst Options = ({ inputs }) => (\n  <div className=\"chart-options\">\n    <div className=\"form\">\n      <h2>Filters</h2>\n      {inputs.map((i) => (i.shouldShow ? (\n        <div className=\"form-row\" key={i.label}>\n          <div className=\"label\">\n            {i.label}\n            :\n          </div>\n          <div className=\"select\">\n            {i.input}\n          </div>\n        </div>\n      ) : null))}\n    </div>\n  </div>\n);\n\nexport default Options;\n","export const AGGREGATE_OPTIONS = [\n  { label: 'U.S.', value: 'state' },\n  { label: 'States', value: 'county' },\n  { label: 'Counties', value: 'none' },\n];\nexport const SHORTCUTS = [\n  {\n    name: 'U.S.',\n    states: [],\n    counties: [],\n    aggregateBy: AGGREGATE_OPTIONS[0],\n  },\n  {\n    name: 'California',\n    states: ['California'],\n    counties: [],\n    aggregateBy: AGGREGATE_OPTIONS[1],\n  },\n  {\n    name: 'New York',\n    states: ['New York'],\n    counties: [],\n    aggregateBy: AGGREGATE_OPTIONS[1],\n  },\n  {\n    name: 'Massachusetts',\n    states: ['Massachusetts'],\n    counties: [],\n    aggregateBy: AGGREGATE_OPTIONS[1],\n  },\n  {\n    name: 'Boston Area',\n    states: ['Massachusetts'],\n    counties: ['Suffolk', 'Norfolk, Middlesex', 'Essex'],\n    aggregateBy: AGGREGATE_OPTIONS[2],\n  },\n  {\n    name: 'SF Bay Area',\n    states: ['California'],\n    counties: ['Santa Clara', 'Alameda', 'San Francisco', 'Contra Costa', 'San Mateo', 'Marin'],\n    aggregateBy: AGGREGATE_OPTIONS[2],\n  },\n];\n","import React from 'react';\n\nimport { SHORTCUTS } from '../constants';\n\nconst Shortcuts = ({ onChange }) => (\n  <div className=\"shortcuts\">\n    <h2>Quick Links</h2>\n    {SHORTCUTS.map((s) => (\n      <div\n        key={s.name}\n        className=\"shortcut\"\n        role=\"button\"\n        onClick={() => onChange(s)}\n      >\n        {s.name}\n      </div>\n    ))}\n  </div>\n);\n\nexport default Shortcuts;\n","import React, { useState } from 'react';\nimport Select from 'react-select';\n\nimport Charts from './Charts';\nimport Options from './Options';\nimport Shortcuts from './Shortcuts';\nimport { states, data } from '../counties.json';\nimport { AGGREGATE_OPTIONS } from '../constants';\n\nconst mapStringToSelectOption = (k) => ({ value: k, label: k });\n\nconst ChartWithSelect = () => {\n  const [selectedStates, setSelectedStates] = useState([]);\n  const [selectedCounties, setSelectedCounties] = useState([]);\n  const [aggregateBy, setAggregateBy] = useState(AGGREGATE_OPTIONS[0]);\n\n  const includesState = (s) => (\n    !selectedStates || !selectedStates.length || (selectedStates.map((st) => st.value).includes(s))\n  );\n  const includesCounty = (c) => (\n    !selectedCounties\n    || !selectedCounties.length || (selectedCounties.map((ct) => ct.value).includes(c))\n  );\n\n  const getData = (d, k) => {\n    const output = {};\n    Object.keys(d[k]).forEach((state) => {\n      if (includesState(state)) {\n        Object.keys(d[k][state]).forEach((county) => {\n          if (includesCounty(county)) {\n            let key;\n            switch (aggregateBy.value) {\n              case 'state':\n                key = k;\n                break;\n              case 'county':\n                key = `${state} ${k}`;\n                break;\n              default:\n                key = `${county}, ${state} ${k}`;\n            }\n            output[key] = output[key] || 0;\n            output[key] += d[k][state][county];\n          }\n        });\n      }\n    });\n\n    return output;\n  };\n  const filteredData = data.map((d) => ({ date: d.date, ...getData(d, 'cases'), ...getData(d, 'deaths') }));\n  const statesList = Object.keys(states).map(mapStringToSelectOption);\n  const countiesList = Object.keys(states).reduce((acc, s) => {\n    const state = states[s];\n\n    if (includesState(s)) {\n      return acc.concat(state.counties);\n    }\n    return acc;\n  }, []).map(mapStringToSelectOption);\n  const inputs = [\n    {\n      shouldShow: true,\n      label: 'State',\n      input: (\n        <Select\n          options={statesList}\n          value={selectedStates}\n          onChange={(v) => {\n            setAggregateBy(AGGREGATE_OPTIONS[v && v.length ? 1 : 0]);\n            setSelectedStates(v);\n          }}\n          isMulti\n        />),\n    },\n    {\n      shouldShow: selectedStates && Boolean(selectedStates.length),\n      label: 'County',\n      input: (\n        <Select\n          options={countiesList}\n          value={selectedCounties}\n          onChange={(v) => {\n            setAggregateBy(AGGREGATE_OPTIONS[v && v.length ? 2 : 1]);\n            setSelectedCounties(v);\n          }}\n          isMulti\n        />),\n    },\n    {\n      shouldShow: (\n        (!selectedStates.length\n        || selectedStates.length > 1)\n        && (!selectedCounties || !selectedCounties.length)),\n      label: 'Combine states?',\n      input: (\n        <input\n          type=\"checkbox\"\n          checked={aggregateBy === AGGREGATE_OPTIONS[0]}\n          onChange={(e) => {\n            const { checked } = e.target;\n            setAggregateBy(AGGREGATE_OPTIONS[checked ? 0 : 1]);\n          }}\n        />\n      ),\n    },\n    {\n      shouldShow: (\n        selectedStates\n        && Boolean(selectedStates.length)\n      ),\n      label: 'Combine counties?',\n      input: (\n        <input\n          type=\"checkbox\"\n          checked={aggregateBy === AGGREGATE_OPTIONS[1]}\n          onChange={(e) => {\n            const { checked } = e.target;\n            setAggregateBy(AGGREGATE_OPTIONS[checked ? 1 : 2]);\n          }}\n        />\n      ),\n    },\n  ];\n  const onShortcutChange = (s) => {\n    setSelectedStates(s.states.map(mapStringToSelectOption));\n    setSelectedCounties(s.counties.map(mapStringToSelectOption));\n    setAggregateBy(s.aggregateBy);\n  };\n\n\n  return (\n    <div className=\"container\">\n      <div style={{ display: 'flex' }}>\n        <Options inputs={inputs} />\n        <Shortcuts onChange={onShortcutChange} />\n      </div>\n\n\n      <Charts\n        title={`United States${\n          selectedStates && selectedStates.length ? ` > ${selectedStates.map((s) => s.label).join(', ')}` : ''\n        }${\n          selectedCounties && selectedCounties.length ? ` > ${selectedCounties.map((s) => s.label).join(', ')} counties` : ''\n        }`}\n        data={filteredData}\n      />\n\n\n    </div>\n  );\n};\n\nexport default ChartWithSelect;\n","import React from 'react';\n\nimport ChartWithSelect from './components/ChartWithSelect';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>US COVID-19 Data</h1>\n      <ChartWithSelect />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}